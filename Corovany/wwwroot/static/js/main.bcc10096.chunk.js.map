{"version":3,"sources":["store/ActionType.ts","store/selectors.ts","store/actions.ts","components/TextGameDisplay.tsx","views/BattleView.tsx","App.tsx","serviceWorker.ts","sockets/sockets.ts","store/reducers/CommandsList.ts","store/reducers/index.ts","store/store.ts","index.tsx"],"names":["ActionType","getCommands","store","CommandsList","commands","getQueue","queue","getCurrentUnit","currentUnit","getUnits","units","getPlayer","players","getCharacters","characters","getGameState","state","won","ExecuteCommand","payload","type","gameStateNames","uninitialized","stateReady","combatReady","finished","unitStates","TextGameDisplay","props","player","useSelector","gameState","style","backgroundColor","overflowY","height","marginLeft","Name","Id","filter","c","map","i","key","CharClass","HealthPoints","Initiative","MoralePoints","SpecialPoints","Character","Perks","p","Cost","u","State","BattleView","dispatch","useDispatch","useState","playerId","updatePlayerId","playerName","updatePlayerName","perkKey","updatePerkKey","targetKey","updateTargetKey","onClick","Type","Args","placeholder","onChange","e","target","value","command","App","className","Boolean","window","location","hostname","match","connection","signalR","withUrl","build","on","commandName","AddCommand","newCommand","connectionPromise","start","catch","err","console","log","SendMessage","message","a","send","UnitState","initialState","rootReducer","combineReducers","action","JSON","stringify","commandValue","parse","CurrentUnit","Units","Queue","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","error"],"mappings":"8LAAYA,E,8DCECC,EAAc,SAACC,GAAD,OAAsBA,EAAMC,aAAaC,UAEvDC,EAAW,SAACH,GAAD,OAAsBA,EAAMC,aAAaG,OAEpDC,EAAiB,SAACL,GAAD,OAAsBA,EAAMC,aAAaK,aAE1DC,EAAW,SAACP,GAAD,OAAsBA,EAAMC,aAAaO,OAEpDC,EAAY,SAACT,GAAD,OAAsBA,EAAMC,aAAaS,QAAQ,IAE7DC,EAAgB,SAACX,GAAD,OAAsBA,EAAMC,aAAaW,YAEzDC,EAAe,SAACb,GAAD,MAAuB,CAC/Cc,MAAOd,EAAMC,aAAaa,MAC1BC,IAAKf,EAAMC,aAAac,O,SDhBhBjB,O,mCAAAA,I,4BAAAA,M,KEYL,IAAMkB,EAA+C,SAACC,GAAD,MAAuB,CAC/EC,KAAMpB,EAAWkB,eACjBC,YCVEE,EAAiB,CACnBC,cAAe,sHACfC,WAAY,yFACZC,YAAa,8CACbC,SAAU,iEAGRC,EAAa,CACf,6CACA,uCACA,kCAGG,SAASC,EAAgBC,GAC5B,IAAMC,EAASC,YAAYnB,GACrBoB,EAAYD,YAAYf,GACxBD,EAAagB,YAAYjB,GACzBH,EAAQoB,YAAYrB,GACpBH,EAAQwB,YAAYzB,GACpBG,EAAcsB,YAAYvB,GAEhC,OAAO,yBAAKyB,MAAO,CACfC,gBAAiB,qBACjBC,UAAW,SACXC,OAAQ,UAER,sFACA,yBAAKH,MAAO,CAACI,WAAY,SACrB,6KAAgCf,EAAeU,EAAUf,OAAzD,KACyB,aAApBe,EAAUf,OAAV,qFAAoDe,EAAUd,IAAM,uCAAW,wFACnFY,GAAU,6DAAUA,EAAOQ,KAAjB,cAA6BR,EAAOS,MAE7B,eAApBP,EAAUf,OAA8C,gBAApBe,EAAUf,OAA+C,aAApBe,EAAUf,QAAyB,oCAC1G,sFACA,yBAAKgB,MAAO,CAACI,WAAY,SACpBtB,EAAWyB,QAAO,SAAAC,GAAC,OAAU,OAANA,KAAYC,KAAI,SAACD,EAAGE,GAAJ,OAAU,yBAAKC,IAAKD,GACxD,kDAASF,EAAEH,MACX,yBAAKL,MAAO,CAACI,WAAY,SACrB,8DAAWI,EAAEI,UAAUP,MACvB,gFAAcG,EAAEK,cAChB,4FAAgBL,EAAEM,YAClB,oEAAYN,EAAEO,cACd,iIAAuBP,EAAEQ,uBAKnB,gBAApBjB,EAAUf,OAA+C,aAApBe,EAAUf,QAAyBR,GAAe,oCACrF,mGAAkBA,EAAYyC,UAAUZ,MACxC,4FACA,yBAAKL,MAAO,CAACI,WAAY,SACpB5B,EAAYyC,UAAUL,UAAUM,MAAMT,KAAI,SAACU,EAAGT,GAAJ,OAAU,yBAAKC,IAAKD,GAC3D,gFAAcS,EAAEd,MAChB,yBAAKL,MAAO,CAACI,WAAY,SACrB,sFAAee,EAAEC,cAKX,gBAApBrB,EAAUf,OAA+C,aAApBe,EAAUf,QAAyB,oCACtE,8DACA,yBAAKgB,MAAO,CAACI,WAAY,SACpB1B,EAAM+B,KAAI,SAACY,EAAGX,GAAJ,OAAU,yBAAKC,IAAKD,GAC3B,kDAASW,EAAEJ,UAAUZ,MACrB,yBAAKL,MAAO,CAACI,WAAY,SACrB,8DAAWiB,EAAEJ,UAAUL,UAAUP,MACjC,2HAAsBgB,EAAER,cACxB,uIAAwBQ,EAAEP,YAC1B,+GAAoBO,EAAEN,cACtB,4KAA+BM,EAAEL,eACjC,sFAAetB,EAAW2B,EAAEC,gBAKtB,gBAApBvB,EAAUf,OAA+C,aAApBe,EAAUf,QAAyB,oCACtE,0EACA,yBAAKgB,MAAO,CAACI,WAAY,SACpB9B,EAAMmC,KAAI,SAACY,EAAGX,GAAJ,OAAU,0BAAMC,IAAKD,GAAIW,EAAEJ,UAAUZ,KAA3B,YC3E9B,SAASkB,EAAW3B,GACvB,IAAMxB,EAAW0B,YAAY7B,GACvBuD,EAAWC,cAFkB,EASAC,mBAAS,IATT,mBAS5BC,EAT4B,KASlBC,EATkB,OAUIF,mBAAS,IAVb,mBAU5BG,EAV4B,KAUhBC,EAVgB,OAuBFJ,mBAAS,IAvBP,mBAuB5BK,EAvB4B,KAuBnBC,EAvBmB,OAwBEN,mBAAS,IAxBX,mBAwB5BO,EAxB4B,KAwBjBC,EAxBiB,KAqCnC,OAAO,oCACH,yBAAKlC,MAAO,CACRC,gBAAiB,uBAEjB,6BACI,4BAAQkC,QA/BK,WACrBX,EAAStC,EAAe,CACpBkD,KAAM,mBACNC,KAAM,CAACV,EAAUE,QA4Bb,sBACA,2BAAOS,YAAa,KAAMC,SAAU,SAACC,GAAD,OAAOZ,EAAeY,EAAEC,OAAOC,UACnE,2BAAOJ,YAAa,OAAQC,SAAU,SAACC,GAAD,OAAOV,EAAiBU,EAAEC,OAAOC,WAE3E,6BACI,4BAAQP,QA5CK,WACrBX,EAAStC,EAAe,CACpBkD,KAAM,wBACNC,KAAM,QAyCF,uBAEJ,6BACI,4BAAQF,QAjCkB,WAClCX,EAAStC,EAAe,CACpBkD,KAAM,gCACNC,KAAM,QA8BF,qCAEJ,6BACI,4BAAQF,QA5BW,WAC3BX,EAAStC,EAAe,CACpBkD,KAAM,kBACNC,KAAM,CAACN,EAASE,QAyBZ,6BACA,2BAAOK,YAAa,UAAWC,SAAU,SAACC,GAAD,OAAOR,EAAcQ,EAAEC,OAAOC,UACvE,2BAAOJ,YAAa,YAAaC,SAAU,SAACC,GAAD,OAAON,EAAgBM,EAAEC,OAAOC,WAE/E,6BACI,4BAAQP,QA3BQ,WACxBX,EAAStC,EAAe,CACpBkD,KAAM,kCACNC,KAAM,QAwBF,0BAEJ,6BACI,kBAAC1C,EAAD,QAGR,yBAAKK,MAAO,CACRG,OAAQ,QACRD,UAAW,SACXD,gBAAiB,uBAEjB,0EACA,yBAAKD,MAAO,CAACI,WAAY,SACpBhC,EAASqC,KAAI,SAACkC,EAASjC,GAAV,OAAgB,yBAAKC,IAAKD,GAAIiC,SClE7CC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAACtB,EAAD,QCKcuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mDCdAC,GAAa,I,MAAIC,IAA+BC,QAAQ,QAAQC,QAEtEH,EAAWI,GAAG,cAAc,SAACC,EAAqBb,GAC9CzE,EAAMsD,SLUkE,SAACmB,EAAiBa,GAAlB,MAA2C,CACnHpE,KAAMpB,EAAWyF,WACjBtE,QAAS,CACLqE,cACAE,WAAYf,IKdDc,CAAWd,EAASa,OAGvC,IAAMG,EAAoBR,EAAWS,QAAQC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,MAE/D,SAAeG,EAAtB,kC,4CAAO,WAA2BC,GAA3B,SAAAC,EAAA,sEACGR,EADH,uBAEGR,EAAWiB,KAAK,aAAcF,GAFjC,4C,sBCGP,IA4GYG,EA5GNC,EAAiC,CACnCtF,MAAO,gBACPZ,SAAU,GACVQ,QAAS,GACTE,WAAY,GACZN,YAAa,KACbE,MAAO,GACPJ,MAAO,GACPW,KAAK,I,SAoGGoF,O,eAAAA,I,iBAAAA,I,gBAAAA,M,KCxHL,IAAME,EAAcC,YAAgB,CAACrG,aDuB7B,WAAmE,IAAzDa,EAAwD,uDAAhDsF,EAAcG,EAAkC,uCAC7E,OAAQA,EAAOrF,MACX,KAAKpB,EAAWkB,eAEZ,OADA+E,EAAYS,KAAKC,UAAUF,EAAOtF,UAC3B,eACAH,EADP,CAEIZ,SAAS,GAAD,mBAAMY,EAAMZ,UAAZ,sBAAoCsG,KAAKC,UAAUF,EAAOtF,cAE1E,KAAKnB,EAAWyF,WACZ,IAAMmB,EAAeF,KAAKG,MAAMJ,EAAOtF,QAAQuE,YAC/C,OAAQe,EAAOtF,QAAQqE,aACnB,IAAK,cACD,OAAO,eACAxE,EADP,CAEIZ,SAAS,GAAD,mBAAMY,EAAMZ,UAAZ,uBACWqG,EAAOtF,QAAQqE,YAD1B,cAC2CkB,KAAKC,UAAUD,KAAKG,MAAMJ,EAAOtF,QAAQuE,YAAa,KAAM,MAC/G9E,QAASgG,IAEjB,IAAK,kBACD,OAAO,eACA5F,EADP,CAEIA,MAAO,aACPZ,SAAS,GAAD,mBAAMY,EAAMZ,UAAZ,uBACWqG,EAAOtF,QAAQqE,YAD1B,cAC2CkB,KAAKC,UAAUD,KAAKG,MAAMJ,EAAOtF,QAAQuE,YAAa,KAAM,MAC/G5E,WAAY8F,IAEpB,IAAK,qBACD,OAAO,eACA5F,EADP,CAEIA,MAAO,cACPZ,SAAS,GAAD,mBAAMY,EAAMZ,UAAZ,uBACWqG,EAAOtF,QAAQqE,YAD1B,cAC2CkB,KAAKC,UAAUD,KAAKG,MAAMJ,EAAOtF,QAAQuE,YAAa,KAAM,MAC/GlF,YAAaoG,EAAaE,YAC1BpG,MAAOkG,EAAaG,MACpBzG,MAAOsG,EAAaI,QAE5B,IAAK,YACD,OAAO,eACAhG,EADP,CAEIA,MAAO,WACPC,IAAK2F,IAEb,IAAK,QACD,OAAON,EACX,QACI,OAAO,eACAtF,EADP,CAEIZ,SAAS,GAAD,mBAAMY,EAAMZ,UAAZ,uBACWqG,EAAOtF,QAAQqE,YAD1B,cAC2CkB,KAAKC,UAAUD,KAAKG,MAAMJ,EAAOtF,QAAQuE,YAAa,KAAM,QAG/H,QACI,OAAO1E,ME3ENd,EAAQ+G,YAAYV,GCKjCW,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUlH,MAAOA,GACb,kBAAC,EAAD,QAGRmH,SAASC,eAAe,SL6HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEd/B,OAAM,SAAAgC,GACL9B,QAAQ8B,MAAMA,EAAM3B,c","file":"static/js/main.bcc10096.chunk.js","sourcesContent":["export enum ActionType {\n    ExecuteCommand,\n    AddCommand,\n}","import {RootState} from \"./reducers\";\n\nexport const getCommands = (store: RootState) => store.CommandsList.commands;\n\nexport const getQueue = (store: RootState) => store.CommandsList.queue;\n\nexport const getCurrentUnit = (store: RootState) => store.CommandsList.currentUnit;\n\nexport const getUnits = (store: RootState) => store.CommandsList.units;\n\nexport const getPlayer = (store: RootState) => store.CommandsList.players[0];\n\nexport const getCharacters = (store: RootState) => store.CommandsList.characters;\n\nexport const getGameState = (store: RootState) => ({\n    state: store.CommandsList.state,\n    won: store.CommandsList.won\n});","import {ActionType} from \"./ActionType\";\n\nexport interface Action {\n    type: ActionType\n    payload?: any\n}\n\ninterface Command {\n    Type: string,\n    Args: string[]\n}\n\nexport const ExecuteCommand: (payload: Command) => Action = (payload: Command) => ({\n    type: ActionType.ExecuteCommand,\n    payload\n})\n\nexport const AddCommand: (command: string, commandName: string) => Action = (command: string, commandName: string) => ({\n    type: ActionType.AddCommand,\n    payload: {\n        commandName,\n        newCommand: command\n    }\n})","import React from 'react';\nimport {useSelector} from \"react-redux\";\nimport {getCharacters, getCurrentUnit, getGameState, getPlayer, getQueue, getUnits} from \"../store/selectors\";\n\nconst gameStateNames = {\n    uninitialized: 'Не инициализированно',\n    stateReady: 'Подготовка к бою',\n    combatReady: 'Бой идет',\n    finished: 'Бой окончен'\n}\n\nconst unitStates = [\n    'Активен',\n    'Сбежал',\n    'Мертв',\n]\n\nexport function TextGameDisplay(props: any) {\n    const player = useSelector(getPlayer);\n    const gameState = useSelector(getGameState);\n    const characters = useSelector(getCharacters);\n    const units = useSelector(getUnits);\n    const queue = useSelector(getQueue);\n    const currentUnit = useSelector(getCurrentUnit);\n\n    return <div style={{\n        backgroundColor: 'rgb(245, 245, 245)',\n        overflowY: 'scroll',\n        height: '400px'\n    }}>\n        <p>Состояние:</p>\n        <div style={{marginLeft: '15px'}}>\n            <p>Игра находится в состоянии \"{gameStateNames[gameState.state]}\".\n                {gameState.state === \"finished\" && `Результат боя: ${gameState.won ? 'Победа' : 'Билли Бонс умер...'}`}</p>\n            {player && <p>Игрок {player.Name} с ID {player.Id}</p>}\n        </div>\n        {(gameState.state === 'stateReady' || gameState.state === 'combatReady' || gameState.state === 'finished') && <>\n            <p>Персонажи:</p>\n            <div style={{marginLeft: '15px'}}>\n                {characters.filter(c => c !== null).map((c, i) => <div key={i}>\n                    <p>Имя: {c.Name}</p>\n                    <div style={{marginLeft: '15px'}}>\n                        <p>Класс: {c.CharClass.Name}</p>\n                        <p>Здоровье: {c.HealthPoints}</p>\n                        <p>Инициатива: {c.Initiative}</p>\n                        <p>Мораль: {c.MoralePoints}</p>\n                        <p>Очки способностей: {c.SpecialPoints}</p>\n                    </div>\n                </div>)}\n            </div>\n        </>}\n        {(gameState.state === 'combatReady' || gameState.state === 'finished') && currentUnit && <>\n            <p>Текущий юнит: {currentUnit.Character.Name}</p>\n            <p>Спосбности:</p>\n            <div style={{marginLeft: '15px'}}>\n                {currentUnit.Character.CharClass.Perks.map((p, i) => <div key={i}>\n                    <p>Название: {p.Name}</p>\n                    <div style={{marginLeft: '15px'}}>\n                        <p>Стоимость: {p.Cost}</p>\n                    </div>\n                </div>)}\n            </div>\n        </>}\n        {(gameState.state === 'combatReady' || gameState.state === 'finished') && <>\n            <p>Юниты:</p>\n            <div style={{marginLeft: '15px'}}>\n                {units.map((u, i) => <div key={i}>\n                    <p>Имя: {u.Character.Name}</p>\n                    <div style={{marginLeft: '15px'}}>\n                        <p>Класс: {u.Character.CharClass.Name}</p>\n                        <p>Текущее здоровье: {u.HealthPoints}</p>\n                        <p>Текущая инициатива: {u.Initiative}</p>\n                        <p>Текущая мораль: {u.MoralePoints}</p>\n                        <p>Текущие очки способностей: {u.SpecialPoints}</p>\n                        <p>Состояние: {unitStates[u.State]}</p>\n                    </div>\n                </div>)}\n            </div>\n        </>}\n        {(gameState.state === 'combatReady' || gameState.state === 'finished') && <>\n            <p>Очередь:</p>\n            <div style={{marginLeft: '15px'}}>\n                {queue.map((u, i) => <span key={i}>{u.Character.Name}, </span>)}\n            </div>\n        </>}\n\n    </div>\n}","import React, {useState} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getCommands} from \"../store/selectors\";\nimport {ExecuteCommand} from \"../store/actions\";\nimport {TextGameDisplay} from \"../components/TextGameDisplay\";\n\n// Displays battle actions\nexport function BattleView(props: any) {\n    const commands = useSelector(getCommands);\n    const dispatch = useDispatch();\n    const executeInitState = () => {\n        dispatch(ExecuteCommand({\n            Type: 'InitializeGameCommand',\n            Args: [],\n        }))\n    }\n    const [playerId, updatePlayerId] = useState('');\n    const [playerName, updatePlayerName] = useState('');\n    const executeAddPlayer = () => {\n        dispatch(ExecuteCommand({\n            Type: 'AddPlayerCommand',\n            Args: [playerId, playerName]\n        }))\n    }\n    const executeInitializeCombatSystem = () => {\n        dispatch(ExecuteCommand({\n            Type: 'InitializeCombatSystemCommand',\n            Args: [],\n        }))\n    }\n    const [perkKey, updatePerkKey] = useState('');\n    const [targetKey, updateTargetKey] = useState('');\n    const executeNextTurnCommand = () => {\n        dispatch(ExecuteCommand({\n            Type: 'NextTurnCommand',\n            Args: [perkKey, targetKey]\n        }))\n    }\n    const executeResetCommand = () => {\n        dispatch(ExecuteCommand({\n            Type: 'InitializeGameStateResetCommand',\n            Args: [],\n        }))\n    }\n    return <>\n        <div style={{\n            backgroundColor: 'rgb(250, 250, 250)'\n        }}>\n            <div>\n                <button onClick={executeAddPlayer}>Execute add player</button>\n                <input placeholder={'id'} onChange={(e) => updatePlayerId(e.target.value)}/>\n                <input placeholder={'name'} onChange={(e) => updatePlayerName(e.target.value)}/>\n            </div>\n            <div>\n                <button onClick={executeInitState}>Execute init state</button>\n            </div>\n            <div>\n                <button onClick={executeInitializeCombatSystem}>Execute initialize combat system</button>\n            </div>\n            <div>\n                <button onClick={executeNextTurnCommand}>Execute next turn command</button>\n                <input placeholder={'perkKey'} onChange={(e) => updatePerkKey(e.target.value)}/>\n                <input placeholder={'targetKey'} onChange={(e) => updateTargetKey(e.target.value)}/>\n            </div>\n            <div>\n                <button onClick={executeResetCommand}>Execute reset command</button>\n            </div>\n            <div>\n                <TextGameDisplay/>\n            </div>\n        </div>\n        <div style={{\n            height: '400px',\n            overflowY: 'scroll',\n            backgroundColor: 'rgb(235, 235, 235)'\n        }}>\n            <p>Команды:</p>\n            <div style={{marginLeft: '15px'}}>\n                {commands.map((command, i) => <pre key={i}>{command}</pre>)}\n            </div>\n        </div>\n    </>\n}   ","import React from 'react';\nimport './App.css';\nimport {BattleView} from \"./views/BattleView\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BattleView />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as signalR from '@microsoft/signalr';\nimport {store} from '../store/store';\nimport {AddCommand} from \"../store/actions\";\n\nconst connection = new signalR.HubConnectionBuilder().withUrl('/hub').build();\n\nconnection.on('newCommand', (commandName: string, command: string) => {\n    store.dispatch(AddCommand(command, commandName));\n});\n\nconst connectionPromise = connection.start().catch(err => console.log(err));\n\nexport async function SendMessage(message: string) {\n    await connectionPromise;\n    await connection.send('NewCommand', message);\n}","import {ActionType} from \"../ActionType\";\nimport {Action} from \"../actions\";\nimport {SendMessage} from \"../../sockets/sockets\";\n\nexport interface ApplicationState {\n    state: 'uninitialized' | 'stateReady' | 'combatReady' | 'finished'\n    currentUnit: Unit | null\n    units: Unit[]\n    queue: Unit[]\n    players: Player[]\n    characters: Character[]\n    commands: string[]\n    won: boolean\n}\n\nconst initialState: ApplicationState = {\n    state: 'uninitialized',\n    commands: [],\n    players: [],\n    characters: [],\n    currentUnit: null,\n    units: [],\n    queue: [],\n    won: false,\n}\n\nexport default function (state = initialState, action: Action): ApplicationState {\n    switch (action.type) {\n        case ActionType.ExecuteCommand:\n            SendMessage(JSON.stringify(action.payload));\n            return {\n                ...state,\n                commands: [...state.commands, `To server: ${JSON.stringify(action.payload)}`]\n            };\n        case ActionType.AddCommand:\n            const commandValue = JSON.parse(action.payload.newCommand);\n            switch (action.payload.commandName) {\n                case('PlayerAdded'):\n                    return {\n                        ...state,\n                        commands: [...state.commands,\n                            `From server(${action.payload.commandName}): ${JSON.stringify(JSON.parse(action.payload.newCommand), null, 4)}`],\n                        players: commandValue,\n                    }\n                case('GameInitialized'):\n                    return {\n                        ...state,\n                        state: 'stateReady',\n                        commands: [...state.commands,\n                            `From server(${action.payload.commandName}): ${JSON.stringify(JSON.parse(action.payload.newCommand), null, 4)}`],\n                        characters: commandValue\n                    }\n                case('BattleFieldUpdated'):\n                    return {\n                        ...state,\n                        state: 'combatReady',\n                        commands: [...state.commands,\n                            `From server(${action.payload.commandName}): ${JSON.stringify(JSON.parse(action.payload.newCommand), null, 4)}`],\n                        currentUnit: commandValue.CurrentUnit,\n                        units: commandValue.Units,\n                        queue: commandValue.Queue,\n                    }\n                case('BattleEnd'):\n                    return {\n                        ...state,\n                        state: 'finished',\n                        won: commandValue,\n                    }\n                case('Reset'):\n                    return initialState\n                default:\n                    return {\n                        ...state,\n                        commands: [...state.commands,\n                            `From server(${action.payload.commandName}): ${JSON.stringify(JSON.parse(action.payload.newCommand), null, 4)}`]\n                    }\n            }\n        default:\n            return state;\n    }\n}\n\nexport interface Player {\n    Name: string\n    Id: string\n}\n\nexport interface Character {\n    Name: string\n    CharClass: CharacterClass\n    Level: number\n    Initiative: number\n    HealthPoints: number\n    MoralePoints: number\n    SpecialPoints: number\n    OwnerId: string\n}\n\nexport interface CharacterClass {\n    Name: string\n    HealthPoints: number\n    MoralePoints: number\n    SpecialPoints: number\n    Initiative: number\n    Perks: Perk[]\n}\n\nexport interface Perk {\n    Name: string\n    Cost: number\n    Cooldown: number\n    LevelToUnlock: number\n}\n\nexport interface Unit {\n    Character: Character\n    HealthPoints: number\n    MoralePoints: number\n    SpecialPoints: number\n    Initiative: number\n    State: UnitState\n}\n\nexport enum UnitState {\n    Fine = 0,\n    Alive = 1,\n    Dead = 2,\n}","import {combineReducers} from \"redux\";\nimport CommandsList from \"./CommandsList\";\n\nexport const rootReducer = combineReducers({CommandsList});\n\nexport type RootState = ReturnType<typeof rootReducer>;","import {createStore} from 'redux';\nimport {rootReducer} from \"./reducers\";\n\nexport const store = createStore(rootReducer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {store} from './store/store';\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}