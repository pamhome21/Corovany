{"version":3,"sources":["store/ActionType.ts","store/selectors.ts","store/actions.ts","interfaces/GameInterfaces.ts","components/TextGameDisplay.tsx","components/GraphicalGameDisplay.tsx","views/BattleView.tsx","App.tsx","serviceWorker.ts","sockets/sockets.ts","store/reducers/GameState.ts","store/reducers/Logs.ts","store/reducers/Control.ts","store/reducers/index.ts","store/store.ts","index.tsx"],"names":["ActionType","getSpells","store","Logs","spellLog","getQueue","GameState","queue","getCurrentUnit","currentUnit","getUnits","units","getPlayer","players","getCharacters","characters","getGameState","state","won","getSelectedPerk","Control","selectedPerk","UnitState","ExecuteCommand","payload","type","gameStateNames","uninitialized","stateReady","combatReady","finished","unitStates","TextGameDisplay","props","player","useSelector","gameState","style","backgroundColor","overflowY","height","width","marginLeft","Name","Id","filter","c","map","i","key","CharClass","HealthPoints","Initiative","MoralePoints","SpecialPoints","Character","Perks","p","Cost","Description","u","State","GraphicalGameDisplay","dispatch","useDispatch","useEffect","Type","Args","xlinkHref","y","transform","textAnchor","x","fill","perk","index","className","onClick","SelectPerk","SkillFile","Array","length","e","OwnerId","unit","UnitComponent","stroke","UnitInQueue","enemy","currentPerk","alert","Bar","color","value","imageRendering","opacity","Runaway","Dead","BattleView","spells","useState","playerId","updatePlayerId","playerName","updatePlayerName","perkKey","updatePerkKey","targetKey","updateTargetKey","float","placeholder","onChange","target","spell","App","Boolean","window","location","hostname","match","connection","signalR","withUrl","build","on","commandName","command","AddCommand","newCommand","connectionPromise","start","catch","err","console","log","SendMessage","message","a","send","initialState","action","JSON","stringify","commandValue","parse","CurrentUnit","Units","Queue","commands","rootReducer","combineReducers","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","error"],"mappings":"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","file":"static/js/main.49636ffa.chunk.js","sourcesContent":["export enum ActionType {\n    ExecuteCommand,\n    AddCommand,\n    SelectPerk,\n}","import {RootState} from \"./reducers\";\n\nexport const getCommands = (store: RootState) => store.Logs.commands;\n\nexport const getSpells = (store: RootState) => store.Logs.spellLog;\n\nexport const getQueue = (store: RootState) => store.GameState.queue;\n\nexport const getCurrentUnit = (store: RootState) => store.GameState.currentUnit;\n\nexport const getUnits = (store: RootState) => store.GameState.units;\n\nexport const getPlayer = (store: RootState) => store.GameState.players[0];\n\nexport const getCharacters = (store: RootState) => store.GameState.characters;\n\nexport const getGameState = (store: RootState) => ({\n    state: store.GameState.state,\n    won: store.GameState.won\n});\n\nexport const getSelectedPerk = (store: RootState) => store.Control.selectedPerk;","import {ActionType} from \"./ActionType\";\nimport {Perk} from \"../interfaces/GameInterfaces\";\n\nexport interface Action {\n    type: ActionType\n    payload?: any\n}\n\ninterface Command {\n    Type: string,\n    Args: string[]\n}\n\nexport const ExecuteCommand: (payload: Command) => Action = (payload: Command) => ({\n    type: ActionType.ExecuteCommand,\n    payload\n})\n\nexport const AddCommand: (command: string, commandName: string) => Action = (command: string, commandName: string) => ({\n    type: ActionType.AddCommand,\n    payload: {\n        commandName,\n        newCommand: command\n    }\n})\n\nexport const SelectPerk: (payload: Perk) => Action = (payload: Perk) => ({\n    type: ActionType.SelectPerk,\n    payload\n})","export interface Player {\n    Name: string\n    Id: string\n}\n\nexport interface Character {\n    Name: string\n    CharClass: CharacterClass\n    Level: number\n    Initiative: number\n    HealthPoints: number\n    MoralePoints: number\n    SpecialPoints: number\n    OwnerId: string\n}\n\nexport interface CharacterClass {\n    Name: string\n    HealthPoints: number\n    MoralePoints: number\n    SpecialPoints: number\n    Initiative: number\n    Perks: Perk[]\n}\n\nexport interface Perk {\n    Name: string\n    SkillFile: string\n    Description: string\n    Cost: number\n    Cooldown: number\n    LevelToUnlock: number\n}\n\nexport interface Unit {\n    Character: Character\n    HealthPoints: number\n    MoralePoints: number\n    SpecialPoints: number\n    Initiative: number\n    State: UnitState\n}\n\nexport enum UnitState {\n    Fine = 0,\n    Runaway = 1,\n    Dead = 2,\n}","import React from 'react';\nimport {useSelector} from \"react-redux\";\nimport {getCharacters, getCurrentUnit, getGameState, getPlayer, getQueue, getUnits} from \"../store/selectors\";\n\nconst gameStateNames = {\n    uninitialized: 'Не инициализированно',\n    stateReady: 'Подготовка к бою',\n    combatReady: 'Бой идет',\n    finished: 'Бой окончен'\n}\n\nconst unitStates = [\n    'Активен',\n    'Сбежал',\n    'Мертв',\n]\n\nexport function TextGameDisplay(props: any) {\n    const player = useSelector(getPlayer);\n    const gameState = useSelector(getGameState);\n    const characters = useSelector(getCharacters);\n    const units = useSelector(getUnits);\n    const queue = useSelector(getQueue);\n    const currentUnit = useSelector(getCurrentUnit);\n\n    return <div style={{\n        backgroundColor: 'rgb(245, 245, 245)',\n        overflowY: 'scroll',\n        height: '600px',\n        width: '100%'\n    }}>\n        <p>Состояние:</p>\n        <div style={{marginLeft: '15px'}}>\n            <p>Игра находится в состоянии \"{gameStateNames[gameState.state]}\".\n                {gameState.state === \"finished\" && `Результат боя: ${gameState.won ? 'Победа' : 'Билли Бонс умер...'}`}</p>\n            {player && <p>Игрок {player.Name} с ID {player.Id}</p>}\n        </div>\n        {(gameState.state === 'stateReady' || gameState.state === 'combatReady' || gameState.state === 'finished') && <>\n            <p>Персонажи:</p>\n            <div style={{marginLeft: '15px'}}>\n                {characters.filter(c => c !== null).map((c, i) => <div key={i}>\n                    <p>Имя: {c.Name}</p>\n                    <div style={{marginLeft: '15px'}}>\n                        <p>Класс: {c.CharClass.Name}</p>\n                        <p>Здоровье: {c.HealthPoints}</p>\n                        <p>Инициатива: {c.Initiative}</p>\n                        <p>Мораль: {c.MoralePoints}</p>\n                        <p>Очки способностей: {c.SpecialPoints}</p>\n                    </div>\n                </div>)}\n            </div>\n        </>}\n        {(gameState.state === 'combatReady' || gameState.state === 'finished') && currentUnit && <>\n            <p>Текущий юнит: {currentUnit.Character.Name}</p>\n            <p>Способности:</p>\n            <div style={{marginLeft: '15px'}}>\n                {currentUnit.Character.CharClass.Perks.map((p, i) => <div key={i}>\n                    <p>Название: {p.Name}</p>\n                    <div style={{marginLeft: '15px'}}>\n                        <p>Стоимость: {p.Cost}</p>\n                        <p>Описание: {p.Description}</p>\n                    </div>\n                </div>)}\n            </div>\n        </>}\n        {(gameState.state === 'combatReady' || gameState.state === 'finished') && <>\n            <p>Юниты:</p>\n            <div style={{marginLeft: '15px'}}>\n                {units.map((u, i) => <div key={i}>\n                    <p>Имя: {u.Character.Name}</p>\n                    <div style={{marginLeft: '15px'}}>\n                        <p>Класс: {u.Character.CharClass.Name}</p>\n                        <p>Текущее здоровье: {u.HealthPoints}</p>\n                        <p>Текущая инициатива: {u.Initiative}</p>\n                        <p>Текущая мораль: {u.MoralePoints}</p>\n                        <p>Текущие очки способностей: {u.SpecialPoints}</p>\n                        <p>Состояние: {unitStates[u.State]}</p>\n                    </div>\n                </div>)}\n            </div>\n        </>}\n        {(gameState.state === 'combatReady' || gameState.state === 'finished') && <>\n            <p>Очередь:</p>\n            <div style={{marginLeft: '15px'}}>\n                {queue.map((u, i) => <span key={i}>{u.Character.Name}, </span>)}\n            </div>\n        </>}\n\n    </div>\n}","import React, {useEffect} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    // getCharacters,\n    getCurrentUnit,\n    getGameState,\n    getPlayer,\n    getQueue,\n    getSelectedPerk,\n    getUnits\n} from \"../store/selectors\";\nimport {ExecuteCommand, SelectPerk} from \"../store/actions\";\nimport {Unit, UnitState} from \"../interfaces/GameInterfaces\";\n\n// const gameStateNames = {\n//     uninitialized: 'Не инициализированно',\n//     stateReady: 'Подготовка к бою',\n//     combatReady: 'Бой идет',\n//     finished: 'Бой окончен'\n// }\n//\n// const unitStates = [\n//     'Активен',\n//     'Сбежал',\n//     'Мертв',\n// ]\n\nexport function GraphicalGameDisplay(props: any) {\n    const player = useSelector(getPlayer);\n    const gameState = useSelector(getGameState);\n    // const characters = useSelector(getCharacters);\n    const units = useSelector(getUnits);\n    const queue = useSelector(getQueue);\n    const currentUnit = useSelector(getCurrentUnit);\n    const selectedPerk = useSelector(getSelectedPerk);\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(ExecuteCommand({\n            Type: 'ReceiveFullDataStateCommand',\n            Args: [],\n        }))\n    }, [])\n\n    return <>\n        <svg height={850} width={800}>\n            <image xlinkHref={'Resources/Panels/top_panel.png'}/>\n            <image y={50} xlinkHref={'Resources/Stages/desert_map.png'}/>\n            <image transform={'scale(1, 0.6)'} y={600 * (1 / 0.6)} xlinkHref={'Resources/Panels/bottom_panel.png'}/>\n\n            {player && <>\n                <text textAnchor={'end'} x={800 - 15} y={20} fill={'white'}>Player name: {player.Name}</text>\n                <text textAnchor={'end'} x={800 - 15} y={40} fill={'lightgray'}>ID: {player.Id}</text>\n            </>}\n\n            {(gameState.state === 'combatReady' || gameState.state === 'finished') && currentUnit && <>\n                <svg y={600}>\n                    <image width={128} height={128}\n                           xlinkHref={`Resources/Characters/${currentUnit.Character.CharClass.Name}/prev.png`}/>\n                    <text fill={'white'} x={115} y={25}>{currentUnit.Character.Name}</text>\n                    <text fill={'white'} x={115} y={45}>{currentUnit.Character.CharClass.Name}</text>\n                    <text fill={'pink'} x={115}\n                          y={65}>{currentUnit.HealthPoints}/{currentUnit.Character.HealthPoints}</text>\n                    <text fill={'yellow'} x={115}\n                          y={85}>{currentUnit.MoralePoints}/{currentUnit.Character.MoralePoints}</text>\n                    <text fill={'cyan'} x={115}\n                          y={105}>{currentUnit.SpecialPoints}/{currentUnit.Character.SpecialPoints}</text>\n                </svg>\n                {currentUnit.Character.CharClass.Perks.map((perk, index) =>\n                    <svg className={'hover-target'} onClick={() => dispatch(SelectPerk(perk))} key={index} y={590}\n                         x={200 + index * 150}>\n                        <image width={120} height={120} xlinkHref={`Resources/Skills/${perk.SkillFile}.png`}/>\n                        <text textAnchor={'middle'} y={120} x={60} fill={'white'}>{perk.Name}</text>\n                        {perk === selectedPerk &&\n                        <image width={120} height={120} xlinkHref={`Resources/Stars/good_guy_star.png`}/>}\n                        <text y={100} x={80} fill={'cyan'}>{perk.Cost}</text>\n                        <foreignObject y={0} x={0} width={120} height={120}>\n                            <p className={'hover-text'}>{perk.Description}</p>\n                        </foreignObject>\n                    </svg>)}\n                {new Array(4 - currentUnit.Character.CharClass.Perks.length).fill(0).map((e, index) =>\n                    <svg key={index} y={590} x={200 + (currentUnit.Character.CharClass.Perks.length + index) * 150}>\n                        <image width={120} height={120} xlinkHref={`Resources/Skills/locked_skill.png`}/>\n                    </svg>)}\n                {units.filter(u => u.Character.OwnerId !== null).map((unit, index) =>\n                    <UnitComponent unit={unit} key={index} index={index}/>)}\n                {units.filter(u => u.Character.OwnerId === null).map((unit, index) =>\n                    <UnitComponent unit={unit} key={index} index={index}/>)}\n                <rect width={50} height={50} fill={'none'} stroke={'black'}/>\n                <UnitInQueue unit={currentUnit} index={0}/>\n                {queue.map((unit, index) => <UnitInQueue unit={unit} index={index + 1} key={index}/>)}\n            </>}\n        </svg>\n    </>\n}\n\ninterface UnitProps {\n    unit: Unit,\n    index: number,\n}\n\nfunction UnitComponent({unit, index}: UnitProps) {\n    const enemy = unit.Character.OwnerId === null;\n    const currentPerk = useSelector(getSelectedPerk);\n    const currentUnit = useSelector(getCurrentUnit);\n    const dispatch = useDispatch();\n    const executeNextTurnCommand = () => {\n        if (!currentPerk) {\n            alert('You need to select perk');\n            return\n        }\n        dispatch(ExecuteCommand({\n            Type: 'NextTurnCommand',\n            Args: [currentPerk.Name, unit.Character.Name]\n        }))\n    }\n    return <svg onClick={executeNextTurnCommand} y={320 + index * 90}\n                x={(enemy ? 500 : 220) - index * 20 * (enemy ? -1 : 1)} className={'hover-target'}>\n        <Bar x={16} y={2} color={'rgb(49, 191, 19)'} value={unit.HealthPoints / unit.Character.HealthPoints}/>\n        <Bar x={16} y={8} color={'rgb(255, 179, 11)'} value={unit.MoralePoints / unit.Character.MoralePoints}/>\n        <Bar x={16} y={14} color={'rgb(109, 195, 235)'} value={unit.SpecialPoints / unit.Character.SpecialPoints}/>\n        {currentUnit && unit.Character.Name === currentUnit.Character.Name &&\n        <rect x={14} y={0} width={68} height={20} fill={'none'} stroke={'rgb(1, 22, 39)'}/>}\n        <image className={'unit'} style={{\n            imageRendering: 'pixelated',\n            opacity: unit.State === UnitState.Runaway ? 0 : 1,\n        }}\n               width={96} height={96} x={enemy && unit.State !== UnitState.Dead ? -96 : 0}\n               transform={(enemy ? 'scale(-1, 1)' : '')\n               + (unit.State === UnitState.Dead && enemy ? 'translate(-96, 0) rotate(-90, 48, 48)' : '')\n               + (unit.State === UnitState.Dead && !enemy ? 'rotate(-90, 48, 48)' : '')\n               }\n               xlinkHref={`Resources/Characters/${unit.Character.CharClass.Name}/char.png`}/>\n        <foreignObject y={50} x={0} width={120} height={120}>\n            <p className={'hover-text'}>{unit.Character.Name}</p>\n        </foreignObject>\n    </svg>\n}\n\ninterface BarProps {\n    x: number,\n    y: number,\n    color: string,\n    value: number,\n}\n\nfunction Bar({x, y, color, value}: BarProps) {\n    return <>\n        <rect stroke={'black'} height={5} width={64} x={x} y={y} fill={'rgb(102, 102, 102)'}/>\n        <rect height={5} width={64 * (value >= 0 ? value : 0)} x={x} y={y} fill={color}/>\n    </>\n}\n\nfunction UnitInQueue({unit, index}: UnitProps) {\n    const enemy = unit.Character.OwnerId === null;\n    return <svg className={'hover-target'} x={-4 + index * 54}>\n        <image y={-4} width={60} height={60} transform={enemy ? 'scale(-1, 1)' : ''} x={enemy ? -60 : 0}\n               xlinkHref={`Resources/Characters/${unit.Character.CharClass.Name}/prev.png`}/>\n        <image y={-4} width={60} height={60} transform={enemy ? 'scale(-1, 1)' : ''} x={enemy ? -60 : 0}\n               xlinkHref={enemy ? 'Resources/Stars/bad_guy_star.png' : 'Resources/Stars/good_guy_star.png'}/>\n        <foreignObject y={50} x={0} width={120} height={120}>\n            <p className={'hover-text'}>{unit.Character.Name}</p>\n        </foreignObject>\n    </svg>\n}","import React, {useState} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getSpells} from \"../store/selectors\";\nimport {ExecuteCommand} from \"../store/actions\";\nimport {TextGameDisplay} from \"../components/TextGameDisplay\";\nimport {GraphicalGameDisplay} from \"../components/GraphicalGameDisplay\";\n\n// Displays battle actions\nexport function BattleView(props: any) {\n    const spells = useSelector(getSpells);\n    const dispatch = useDispatch();\n    const executeInitState = () => {\n        dispatch(ExecuteCommand({\n            Type: 'InitializeGameCommand',\n            Args: [],\n        }))\n    }\n    const [playerId, updatePlayerId] = useState('');\n    const [playerName, updatePlayerName] = useState('');\n    const executeAddPlayer = () => {\n        dispatch(ExecuteCommand({\n            Type: 'AddPlayerCommand',\n            Args: [playerId, playerName]\n        }))\n    }\n    const executeInitializeCombatSystem = () => {\n        dispatch(ExecuteCommand({\n            Type: 'InitializeCombatSystemCommand',\n            Args: [],\n        }))\n    }\n    const [perkKey, updatePerkKey] = useState('');\n    const [targetKey, updateTargetKey] = useState('');\n    const executeNextTurnCommand = () => {\n        dispatch(ExecuteCommand({\n            Type: 'NextTurnCommand',\n            Args: [perkKey, targetKey]\n        }))\n    }\n    const executeResetCommand = () => {\n        dispatch(ExecuteCommand({\n            Type: 'InitializeGameStateResetCommand',\n            Args: [],\n        }))\n    }\n\n    const executeReceiveFullDataStateCommand = () => {\n        dispatch(ExecuteCommand({\n            Type: 'ReceiveFullDataStateCommand',\n            Args: [],\n        }))\n    }\n    return <>\n        <div style={{float: 'left'}}>\n            <div style={{\n                backgroundColor: 'rgb(250, 250, 250)',\n                width: '40vw',\n            }}>\n                <div>\n                    <button onClick={executeAddPlayer}>Execute add player</button>\n                    <input placeholder={'id'} onChange={(e) => updatePlayerId(e.target.value)}/>\n                    <input placeholder={'name'} onChange={(e) => updatePlayerName(e.target.value)}/>\n                </div>\n                <div>\n                    <button onClick={executeInitState}>Execute init state</button>\n                </div>\n                <div>\n                    <button onClick={executeInitializeCombatSystem}>Execute initialize combat system</button>\n                </div>\n                <div>\n                    <button onClick={executeNextTurnCommand}>Execute next turn command</button>\n                    <input placeholder={'perkKey'} onChange={(e) => updatePerkKey(e.target.value)}/>\n                    <input placeholder={'targetKey'} onChange={(e) => updateTargetKey(e.target.value)}/>\n                </div>\n                <div>\n                    <button onClick={executeResetCommand}>Execute reset command</button>\n                </div>\n                <div>\n                    <button\n                        onClick={executeReceiveFullDataStateCommand}>Execute receive full data state command</button>\n                </div>\n            </div>\n            <div>\n                <TextGameDisplay/>\n            </div>\n            <div style={{\n                height: '200px',\n                width: '100%',\n                overflowY: 'scroll',\n                backgroundColor: 'rgb(235, 235, 235)'\n            }}>\n            <p>Способности:</p>\n                <div style={{marginLeft: '15px'}}>\n                    {spells.map((spell, i) => <pre key={i}>{spell}</pre>)}\n                </div>\n            </div>\n        </div>\n\n        <div style={{float: 'left'}}>\n            <GraphicalGameDisplay/>\n        </div>\n    </>\n}   ","import React from 'react';\nimport './App.css';\nimport {BattleView} from \"./views/BattleView\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BattleView />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as signalR from '@microsoft/signalr';\nimport {store} from '../store/store';\nimport {AddCommand} from \"../store/actions\";\n\nconst connection = new signalR.HubConnectionBuilder().withUrl('/hub').build();\n\nconnection.on('newCommand', (commandName: string, command: string) => {\n    store.dispatch(AddCommand(command, commandName));\n});\n\nconst connectionPromise = connection.start().catch(err => console.log(err));\n\nexport async function SendMessage(message: string) {\n    await connectionPromise;\n    await connection.send('NewCommand', message);\n}","import {ActionType} from \"../ActionType\";\nimport {Action} from \"../actions\";\nimport {SendMessage} from \"../../sockets/sockets\";\nimport {Character, Player, Unit} from \"../../interfaces/GameInterfaces\";\n\nexport interface ApplicationState {\n    state: 'uninitialized' | 'stateReady' | 'combatReady' | 'finished'\n    currentUnit: Unit | null\n    units: Unit[]\n    queue: Unit[]\n    players: Player[]\n    characters: Character[]\n    won: boolean\n}\n\nconst initialState: ApplicationState = {\n    state: 'uninitialized',\n    players: [],\n    characters: [],\n    currentUnit: null,\n    units: [],\n    queue: [],\n    won: false,\n}\n\nexport default function (state = initialState, action: Action): ApplicationState {\n    switch (action.type) {\n        case ActionType.ExecuteCommand:\n            SendMessage(JSON.stringify(action.payload));\n            return state\n        case ActionType.AddCommand:\n            const commandValue = JSON.parse(action.payload.newCommand);\n            switch (action.payload.commandName) {\n                case('PlayerAdded'):\n                    return {\n                        ...state,\n                        players: commandValue,\n                    }\n                case('GameInitialized'):\n                    return {\n                        ...state,\n                        state: 'stateReady',\n                        characters: commandValue\n                    }\n                case('BattleFieldUpdated'):\n                    return {\n                        ...state,\n                        state: 'combatReady',\n                        currentUnit: commandValue.CurrentUnit,\n                        units: commandValue.Units,\n                        queue: commandValue.Queue,\n                    }\n                case('BattleEnd'):\n                    return {\n                        ...state,\n                        state: 'finished',\n                        won: commandValue,\n                    }\n                case('FrontendError'):\n                    alert(action.payload.newCommand);\n                    return state\n                case('Reset'):\n                    return initialState\n                default:\n                    return state\n            }\n        default:\n            return state;\n    }\n}","import {Action} from \"../actions\";\nimport {ActionType} from \"../ActionType\";\n\ninterface LogState {\n    commands: string[]\n    spellLog: string[]\n}\n\nconst initialState: LogState = {\n    commands: [],\n    spellLog: [],\n}\n\nexport default function(state = initialState, action: Action): LogState{\n    switch (action.type) {\n        case ActionType.ExecuteCommand:\n            return {\n                ...state,\n                commands: [...state.commands, `To server: ${JSON.stringify(action.payload)}`]\n            };\n        case ActionType.AddCommand:\n            return {\n                ...state,\n                commands: [...state.commands,\n                    `From server(${action.payload.commandName}): ${JSON.stringify(JSON.parse(action.payload.newCommand), null, 4)}`],\n                spellLog: action.payload.commandName === 'FrontendSpellLog' ?\n                    [...state.spellLog, JSON.stringify(JSON.parse(action.payload.newCommand), null, 4)] : state.spellLog,\n            }\n        default:\n            return state\n    }\n} ","import {Action} from \"../actions\";\nimport {ActionType} from \"../ActionType\";\nimport {Perk} from \"../../interfaces/GameInterfaces\";\n\ninterface ControlState {\n    selectedPerk: Perk | null\n}\n\nconst initialState: ControlState = {\n    selectedPerk: null,\n}\n\nexport default function (state = initialState, action: Action): ControlState {\n    switch (action.type) {\n        case ActionType.SelectPerk:\n            return {\n                ...state,\n                selectedPerk: action.payload as Perk,\n            }\n        case ActionType.ExecuteCommand:\n            if (action.payload.Type === 'NextTurnCommand')\n                return {\n                    ...state,\n                    selectedPerk: null,\n                }\n            return state;\n        default:\n            return state\n    }\n}","import {combineReducers} from \"redux\";\nimport GameState from \"./GameState\";\nimport Logs from \"./Logs\"\nimport Control from \"./Control\";\nconsole.log(GameState);\n\nexport const rootReducer = combineReducers({GameState, Logs, Control});\n\nexport type RootState = ReturnType<typeof rootReducer>;","import {createStore} from 'redux';\nimport {rootReducer} from \"./reducers\";\n\nexport const store = createStore(rootReducer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {store} from './store/store';\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}