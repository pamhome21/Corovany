{"version":3,"sources":["store/ActionType.ts","store/selectors.ts","views/BattleView.tsx","store/actions.ts","App.tsx","serviceWorker.ts","sockets/sockets.ts","store/reducers/CommandsList.ts","store/reducers/index.ts","store/store.ts","index.tsx"],"names":["ActionType","getCommands","store","CommandsList","commands","BattleView","props","useSelector","dispatch","useDispatch","onClick","payload","Type","Args","type","ExecuteCommand","map","command","i","key","App","className","Boolean","window","location","hostname","match","connection","signalR","withUrl","build","on","AddCommand","newCommand","connectionPromise","start","catch","err","console","log","SendMessage","message","a","send","initialState","rootReducer","combineReducers","state","action","JSON","stringify","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","error"],"mappings":"8LAAYA,E,qDCECC,EAAc,SAACC,GACxB,OAAOA,EAAMC,aAAaC,W,SDHlBJ,O,mCAAAA,I,4BAAAA,M,KEML,SAASK,EAAWC,GACvB,IAAMF,EAAWG,YAAYN,GACvBO,EAAWC,cAOjB,OAAO,6BACH,4BAAQC,QAPa,WCG+B,IAACC,EDFrDH,GCEqDG,EDF7B,CACpBC,KAAM,wBACNC,KAAM,ICAiE,CAC/EC,KAAMd,EAAWe,eACjBJ,eDEI,sBACCP,EAASY,KAAI,SAACC,EAASC,GAAV,OAAgB,uBAAGC,IAAKD,GAAID,OELnCG,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAChB,EAAD,QCKciB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oDCdAC,GAAa,I,MAAIC,IAA+BC,QAAQ,QAAQC,QAEtEH,EAAWI,GAAG,cAAc,SAACd,GACzBf,EAAMM,SHU6C,SAACS,GAAD,MAAsB,CACzEH,KAAMd,EAAWgC,WACjBrB,QAAS,CACLsB,WAAYhB,IGbDe,CAAWf,OAG9B,IAAMiB,EAAoBP,EAAWQ,QAAQC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,MAE/D,SAAeG,EAAtB,kC,4CAAO,WAA2BC,GAA3B,SAAAC,EAAA,sEACGR,EADH,cAEHI,QAAQC,IAAIE,GAFT,SAGGd,EAAWgB,KAAK,aAAcF,GAHjC,4C,sBCJP,IAAMG,EAAiC,CACnCxC,SAAU,ICNDyC,EAAcC,YAAgB,CAAC3C,aDS7B,WAAmE,IAAzD4C,EAAwD,uDAAhDH,EAAcI,EAAkC,uCAC7E,OAAQA,EAAOlC,MACX,KAAKd,EAAWe,eAEZ,OADAyB,EAAYS,KAAKC,UAAUF,EAAOrC,UAC3BoC,EACX,KAAK/C,EAAWgC,WACZ,OAAO,eACAe,EADP,CAEI3C,SAAS,GAAD,mBAAM2C,EAAM3C,UAAZ,CAAsB4C,EAAOrC,QAAQsB,eAErD,QACI,OAAOc,MEpBN7C,EAAQiD,YAAYN,GCKjCO,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUpD,MAAOA,GACb,kBAAC,EAAD,QAGRqD,SAASC,eAAe,SL6HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEd1B,OAAM,SAAA2B,GACLzB,QAAQyB,MAAMA,EAAMtB,c","file":"static/js/main.1345e75c.chunk.js","sourcesContent":["export enum ActionType {\n    ExecuteCommand,\n    AddCommand,\n}","import {RootState} from \"./reducers\";\n\nexport const getCommands = (store: RootState) => {\n    return store.CommandsList.commands;\n}","import React, {} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getCommands} from \"../store/selectors\";\nimport {ExecuteCommand} from \"../store/actions\";\n\n// Displays battle actions\nexport function BattleView(props: any){\n    const commands = useSelector(getCommands);\n    const dispatch = useDispatch();\n    const executeInitState = () => {\n        dispatch(ExecuteCommand({\n            Type: 'InitializeGameCommand',\n            Args: [],\n        }))\n    }\n    return <div>\n        <button onClick={executeInitState}>Execute init state</button>\n        {commands.map((command, i) => <p key={i}>{command}</p>)}\n    </div>\n}","import {ActionType} from \"./ActionType\";\n\nexport interface Action {\n    type: ActionType\n    payload?: any\n}\n\ninterface Command {\n    Type: string,\n    Args: string[]\n}\n\nexport const ExecuteCommand: (payload: Command) => Action = (payload: Command) => ({\n    type: ActionType.ExecuteCommand,\n    payload\n})\n\nexport const AddCommand: (command: string) => Action = (command: string) => ({\n    type: ActionType.AddCommand,\n    payload: {\n        newCommand: command\n    }\n})","import React from 'react';\nimport './App.css';\nimport {BattleView} from \"./views/BattleView\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BattleView />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as signalR from '@microsoft/signalr';\nimport {store} from '../store/store';\nimport {AddCommand} from \"../store/actions\";\n\nconst connection = new signalR.HubConnectionBuilder().withUrl('/hub').build();\n\nconnection.on('newCommand', (command: string) => {\n    store.dispatch(AddCommand(command));\n});\n\nconst connectionPromise = connection.start().catch(err => console.log(err));\n\nexport async function SendMessage(message: string) {\n    await connectionPromise;\n    console.log(message);\n    await connection.send('NewCommand', message);\n}","import {ActionType} from \"../ActionType\";\nimport {Action} from \"../actions\";\nimport {SendMessage} from \"../../sockets/sockets\";\n\nexport interface ApplicationState {\n    commands: string[]\n}\n\nconst initialState: ApplicationState = {\n    commands: []\n}\n\nexport default function (state = initialState, action: Action): ApplicationState {\n    switch (action.type) {\n        case ActionType.ExecuteCommand:\n            SendMessage(JSON.stringify(action.payload));\n            return state;\n        case ActionType.AddCommand:\n            return {\n                ...state,\n                commands: [...state.commands, action.payload.newCommand]\n            }\n        default:\n            return state;\n    }\n}","import {combineReducers} from \"redux\";\nimport CommandsList from \"./CommandsList\";\n\nexport const rootReducer = combineReducers({CommandsList});\n\nexport type RootState = ReturnType<typeof rootReducer>;","import {createStore} from 'redux';\nimport {rootReducer} from \"./reducers\";\n\nexport const store = createStore(rootReducer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {store} from './store/store';\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}